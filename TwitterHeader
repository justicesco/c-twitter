
#ifndef TWITTERHEADER_H_INCLUDED
#define TWITTERHEADER_H_INCLUDED

#include <iostream>

using namespace std;

template <class T>
class Twitter {
public:
    Twitter(T u);
    void AddFollower(T p);
    void RemoveFollower(T p);
    void PrintFollowers();
private:
    T user;
    T * followers;
    int numFollowers;   // how many followers at present..
    // if numFollowers == k, then they are in indexes 0 .. (k-1) in followers
    int capacity;       // how many total slots available in followers
};

template <class T>
Twitter<T>::Twitter(T u) {
    user = u;
    numFollowers = 0;   // currently 0 followers
    capacity = 2;
    followers = new T[capacity];
}

template <class T>
void Twitter<T>::AddFollower(T p) {
    if (numFollowers >= capacity) {
        T * temp = new T[capacity * 2];
        for (int i = 0; i < capacity; i++)
            temp[i] = followers[i];
        delete [] followers;
        followers = temp;
        capacity = capacity * 2;
    }
    followers[numFollowers++] = p;
}

template <class T>
void Twitter<T>::RemoveFollower(T p) {
    int index = -1;
    for (int i = 0; i < numFollowers; i++) {
        if (followers[i] == p) {
            index = i;
        }
    }
    if (index == -1) return;    // follower not present, so return.
    // else move the elements appropriately
    for (int i = index; i < numFollowers - 1; i++) {
        followers[i] = followers[i + 1];
    }
    numFollowers --;
}

template <class T>
void Twitter<T>::PrintFollowers() {
    for (int i = 0; i < numFollowers; i++) {
        cout << followers[i] << ", ";
    }
    cout << endl;
}

#endif // TWITTERHEADER_H_INCLUDED
